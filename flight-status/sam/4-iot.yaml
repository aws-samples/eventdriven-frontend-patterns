# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

---
AWSTemplateFormatVersion: "2010-09-09"

Transform: AWS::Serverless-2016-10-31

Description: >
  re:Invent 2024
  API305 - Asynchronous frontends: Building seamless event-driven experiences

Parameters:
  ProjectName:
    Description: Name for this project
    Type: String
    Default: patterns-eventdriven-frontends

  IoTCoreEndpoint:
    Description: IoT Core endpoint for account (DNS name only)
    Type: String

Globals:
  Function:
    Architectures:
      - arm64
    MemorySize: 256
    Timeout: 10
    Tracing: Active
    Runtime: nodejs20.x
    Environment:
        Variables:
          POWERTOOLS_LOG_LEVEL: DEBUG
    Tags:
      ProjectName: !Ref ProjectName

Resources:
  #
  # Lambda function - stream handler
  #
  StreamHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ./src/functions/stream/4-iot.handler
      Policies:
        - Statement:
            Effect: Allow
            Action: iot:Connect
            Resource: "*"
        - Statement:
            Effect: Allow
            Action: iot:Publish
            Resource:
              - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/flights/events"
              - !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/flights/events/*"
      Tags:
        ProjectName: !Ref ProjectName
      Environment:
        Variables:
          IoTCoreEndpoint: !Ref IoTCoreEndpoint
          FlightStatusTopic: "flights/events"
          POWERTOOLS_SERVICE_NAME: handleStream-pattern4
      Events:
        StreamEvent:
          Type: Kinesis
          Properties:
            BatchSize: 1
            Stream: "{{resolve:ssm:/patterns/eventdriven/flights/stream/arn}}"
            StartingPosition: TRIM_HORIZON
            # MaximumBatchingWindowInSeconds: 10
            FilterCriteria:
              Filters:
                - Pattern: '{ "data": { "eventName": [ "INSERT", "MODIFY" ], "dynamodb": { "NewImage": { "type": { "S": [ "FlightStatus" ] } } } } }'
            FunctionResponseTypes:
              - ReportBatchItemFailures
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: false
        Sourcemap: false
        Target: ES2020
        EntryPoints:
          - ./src/functions/stream/4-iot.js

  StreamHandlerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    DependsOn: StreamHandlerFunction
    Properties:
      RetentionInDays: 3
      LogGroupName: !Sub "/aws/lambda/${StreamHandlerFunction}"

  #
  # IoT Policy to allow access to IoT topics
  #
  IoTPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: AllowFlightStatusEventsClients
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: iot:Connect
            Resource: !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/*"
          - Effect: Allow
            Action: iot:Subscribe
            Resource: !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/*"

  IoTPolicyAttachment:
    Type: AWS::IoT::PolicyPrincipalAttachment
    DependsOn: IoTPolicy
    Properties:
      PolicyName: AllowFlightStatusEventsClients
      Principal: "{{resolve:ssm:/patterns/eventdriven/frontend/identity/pool}}"

  #
  # Allow the frontend unauth role to access GraphQL resources
  #
  Pattern4IoTAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - "{{resolve:ssm:/patterns/eventdriven/frontend/unauth/role}}"
      PolicyName: pattern4-allow-iot
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: iot:Connect
            Resource: !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:client/*"
          - Effect: Allow
            Action: iot:Subscribe
            Resource: !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topicfilter/*"
          - Effect: Allow
            Action: iot:Receive
            Resource: !Sub "arn:aws:iot:${AWS::Region}:${AWS::AccountId}:topic/*"
